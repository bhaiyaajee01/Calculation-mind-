import pygame
import random
import sys
import os
from pygame import mixer

# Initialize pygame
pygame.init()
mixer.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Run for Life")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (34, 139, 34)
BROWN = (139, 69, 19)
BLUE = (135, 206, 235)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
COLORS = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255), (0, 255, 255)]

# Game variables
clock = pygame.time.Clock()
FPS = 60
scroll_speed = 5
score = 0
game_active = False
game_started = False
difficulty_timer = 0

# Load sounds
try:
    jump_sound = mixer.Sound("jump.wav") if os.path.exists("jump.wav") else None
    coin_sound = mixer.Sound("coin.wav") if os.path.exists("coin.wav") else None
    game_over_sound = mixer.Sound("game_over.wav") if os.path.exists("game_over.wav") else None
    background_music = "background.mp3" if os.path.exists("background.mp3") else None
    
    if background_music:
        mixer.music.load(background_music)
        mixer.music.set_volume(0.5)
except:
    pass

# Fonts
title_font = pygame.font.SysFont("comicsans", 80, bold=True)
menu_font = pygame.font.SysFont("comicsans", 40)
score_font = pygame.font.SysFont("comicsans", 30)

# Character classes
class Character:
    def __init__(self, x, y, name, gender, handsome=False):
        self.x = x
        self.y = y
        self.name = name
        self.gender = gender
        self.handsome = handsome
        self.width = 50
        self.height = 80
        self.jump_vel = 0
        self.jumping = False
        self.color = random.choice(COLORS)
        
    def draw(self):
        # Draw character body
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))
        
        # Draw face (handsome characters have better faces)
        if self.handsome or self.gender == "woman":
            pygame.draw.circle(screen, (255, 218, 185), (self.x + self.width//2, self.y + 20), 15)
        else:
            pygame.draw.circle(screen, (210, 180, 140), (self.x + self.width//2, self.y + 20), 15)
        
        # Draw name
        name_text = menu_font.render(self.name, True, BLACK)
        screen.blit(name_text, (self.x - 10, self.y - 30))
        
    def jump(self):
        if not self.jumping:
            self.jump_vel = -15
            self.jumping = True
            if jump_sound:
                jump_sound.play()
    
    def update(self):
        # Apply gravity
        self.jump_vel += 1
        self.y += self.jump_vel
        
        # Ground collision
        if self.y >= HEIGHT - self.height - 50:
            self.y = HEIGHT - self.height - 50
            self.jumping = False
            self.jump_vel = 0

# Obstacle classes
class Tree:
    def __init__(self, x):
        self.x = x
        self.width = 40
        self.height = random.randint(80, 120)
        self.gap = random.randint(100, 150)
        self.passed = False
        
    def draw(self):
        # Tree trunk
        pygame.draw.rect(screen, BROWN, (self.x, HEIGHT - 50 - self.height, self.width, self.height))
        
        # Tree leaves
        pygame.draw.circle(screen, GREEN, (self.x + self.width//2, HEIGHT - 50 - self.height - 20), 30)
        
    def update(self):
        self.x -= scroll_speed
        
    def collide(self, character):
        character_mask = pygame.Rect(character.x, character.y, character.width, character.height)
        tree_mask = pygame.Rect(self.x, HEIGHT - 50 - self.height, self.width, self.height)
        
        return character_mask.colliderect(tree_mask)

class Tiger:
    def __init__(self, x):
        self.x = x
        self.width = 60
        self.height = 40
        self.speed = scroll_speed + 2
        
    def draw(self):
        # Tiger body
        pygame.draw.rect(screen, (255, 165, 0), (self.x, HEIGHT - 50 - self.height, self.width, self.height))
        
        # Tiger stripes
        for i in range(3):
            pygame.draw.rect(screen, BLACK, (self.x + 5 + i*15, HEIGHT - 50 - self.height + 10, 10, 5))
            pygame.draw.rect(screen, BLACK, (self.x + 10 + i*15, HEIGHT - 50 - self.height + 20, 10, 5))
        
        # Tiger face
        pygame.draw.circle(screen, (255, 165, 0), (self.x + 10, HEIGHT - 50 - self.height + 10), 10)
        pygame.draw.circle(screen, WHITE, (self.x + 8, HEIGHT - 50 - self.height + 8), 3)
        pygame.draw.circle(screen, WHITE, (self.x + 12, HEIGHT - 50 - self.height + 8), 3)
        
    def update(self):
        self.x -= self.speed
        
    def collide(self, character):
        character_mask = pygame.Rect(character.x, character.y, character.width, character.height)
        tiger_mask = pygame.Rect(self.x, HEIGHT - 50 - self.height, self.width, self.height)
        
        return character_mask.colliderect(tiger_mask)

class Coin:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 15
        self.collected = False
        
    def draw(self):
        if not self.collected:
            pygame.draw.circle(screen, YELLOW, (self.x, self.y), self.radius)
            pygame.draw.circle(screen, BLACK, (self.x, self.y), self.radius, 2)
            
    def update(self):
        self.x -= scroll_speed
        
    def collide(self, character):
        if self.collected:
            return False
            
        character_mask = pygame.Rect(character.x, character.y, character.width, character.height)
        coin_mask = pygame.Rect(self.x - self.radius, self.y - self.radius, self.radius*2, self.radius*2)
        
        if character_mask.colliderect(coin_mask):
            self.collected = True
            if coin_sound:
                coin_sound.play()
            return True
        return False

# Create characters
male_characters = [
    Character(100, HEIGHT - 130, "Amrit", "man", handsome=True),
    Character(100, HEIGHT - 130, "Anurag", "man"),
    Character(100, HEIGHT - 130, "Sawan", "man")
]

female_characters = [
    Character(100, HEIGHT - 130, "Muskan", "woman", handsome=True),
    Character(100, HEIGHT - 130, "Ruchi", "woman"),
    Character(100, HEIGHT - 130, "Arti", "woman")
]

current_character = male_characters[0]
character_index = 0
is_male = True

# Game objects
obstacles = []
coins = []
last_obstacle = 0
last_coin = 0

# Creator face (simple representation)
creator_face = pygame.Rect(WIDTH//2 - 50, HEIGHT//2 - 50, 100, 100)

def reset_game():
    global obstacles, coins, score, scroll_speed, game_active, difficulty_timer
    obstacles = []
    coins = []
    score = 0
    scroll_speed = 5
    difficulty_timer = 0
    current_character.y = HEIGHT - 130
    current_character.jump_vel = 0
    current_character.jumping = False
    game_active = True
    
    if background_music:
        mixer.music.play(-1)

def draw_ground():
    pygame.draw.rect(screen, GREEN, (0, HEIGHT - 50, WIDTH, 50))

def draw_background():
    # Jungle background
    screen.fill(BLUE)
    
    # Draw distant trees
    for i in range(0, WIDTH, 200):
        pygame.draw.rect(screen, BROWN, (i, HEIGHT - 150, 20, 100))
        pygame.draw.circle(screen, GREEN, (i + 10, HEIGHT - 170), 40)

def draw_menu():
    # Title
    title_text = title_font.render("RUN FOR LIFE", True, BLACK)
    screen.blit(title_text, (WIDTH//2 - title_text.get_width()//2, 100))
    
    # Created by
    creator_text = menu_font.render("Created by Bhumihar_amrit", True, RED)
    screen.blit(creator_text, (WIDTH//2 - creator_text.get_width()//2, 200))
    
    # Character selection
    gender_text = menu_font.render("Select Character:", True, BLACK)
    screen.blit(gender_text, (WIDTH//2 - gender_text.get_width()//2, 300))
    
    # Male characters
    male_text = menu_font.render("Men: 1-Amrit  2-Anurag  3-Sawan", True, BLUE)
    screen.blit(male_text, (WIDTH//2 - male_text.get_width()//2, 350))
    
    # Female characters
    female_text = menu_font.render("Women: 4-Ruchi  5-Arti  6-Muskan", True, (255, 105, 180))
    screen.blit(female_text, (WIDTH//2 - female_text.get_width()//2, 400))
    
    # Start instruction
    start_text = menu_font.render("Press SPACE to Start", True, GREEN)
    screen.blit(start_text, (WIDTH//2 - start_text.get_width()//2, 500))
    
    # Draw simple creator face
    pygame.draw.ellipse(screen, (255, 218, 185), creator_face)
    pygame.draw.circle(screen, BLACK, (WIDTH//2 - 20, HEIGHT//2 - 20), 5)
    pygame.draw.circle(screen, BLACK, (WIDTH//2 + 20, HEIGHT//2 - 20), 5)
    pygame.draw.arc(screen, BLACK, (WIDTH//2 - 30, HEIGHT//2, 60, 40), 3.14, 6.28, 2)

def draw_score():
    score_text = score_font.render(f"Score: {score}", True, BLACK)
    screen.blit(score_text, (20, 20))

def generate_obstacles():
    global last_obstacle
    
    if pygame.time.get_ticks() - last_obstacle > random.randint(1500, 3000):
        # Randomly choose between tree and tiger (more tigers as score increases)
        if random.random() < 0.3 + min(0.5, score / 1000):
            obstacles.append(Tiger(WIDTH))
        else:
            obstacles.append(Tree(WIDTH))
        last_obstacle = pygame.time.get_ticks()

def generate_coins():
    global last_coin
    
    if pygame.time.get_ticks() - last_coin > random.randint(500, 1500):
        coins.append(Coin(WIDTH, random.randint(HEIGHT - 200, HEIGHT - 70)))
        last_coin = pygame.time.get_ticks()

def increase_difficulty():
    global scroll_speed, difficulty_timer
    
    difficulty_timer += 1
    if difficulty_timer % 500 == 0:
        scroll_speed += 0.5

# Main game loop
running = True
while running:
    clock.tick(FPS)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
        if event.type == pygame.KEYDOWN:
            if not game_started:
                # Character selection
                if event.key == pygame.K_1:
                    current_character = male_characters[0]
                    character_index = 0
                    is_male = True
                elif event.key == pygame.K_2:
                    current_character = male_characters[1]
                    character_index = 1
                    is_male = True
                elif event.key == pygame.K_3:
                    current_character = male_characters[2]
                    character_index = 2
                    is_male = True
                elif event.key == pygame.K_4:
                    current_character = female_characters[0]
                    character_index = 0
                    is_male = False
                elif event.key == pygame.K_5:
                    current_character = female_characters[1]
                    character_index = 1
                    is_male = False
                elif event.key == pygame.K_6:
                    current_character = female_characters[2]
                    character_index = 2
                    is_male = False
                    
                # Start game
                elif event.key == pygame.K_SPACE:
                    game_started = True
                    reset_game()
                    
            elif not game_active:
                # Restart game
                if event.key == pygame.K_SPACE:
                    reset_game()
                    
            elif game_active:
                # Jump
                if event.key == pygame.K_SPACE or event.key == pygame.K_UP:
                    current_character.jump()
    
    if game_started:
        if game_active:
            # Update
            current_character.update()
            generate_obstacles()
            generate_coins()
            increase_difficulty()
            
            for obstacle in obstacles[:]:
                obstacle.update()
                
                if obstacle.collide(current_character):
                    game_active = False
                    if game_over_sound:
                        game_over_sound.play()
                    if background_music:
                        mixer.music.stop()
                
                if obstacle.x + obstacle.width < 0:
                    obstacles.remove(obstacle)
                    
            for coin in coins[:]:
                coin.update()
                
                if coin.collide(current_character):
                    score += 10
                    coins.remove(coin)
                elif coin.x + coin.radius < 0:
                    coins.remove(coin)
            
            # Score for passing obstacles
            for obstacle in obstacles:
                if not obstacle.passed and obstacle.x + obstacle.width < current_character.x:
                    obstacle.passed = True
                    score += 5
            
            # Draw
            draw_background()
            draw_ground()
            
            for obstacle in obstacles:
                obstacle.draw()
                
            for coin in coins:
                coin.draw()
                
            current_character.draw()
            draw_score()
            
        else:
            # Game over screen
            draw_background()
            draw_ground()
            
            game_over_text = title_font.render("GAME OVER", True, RED)
            screen.blit(game_over_text, (WIDTH//2 - game_over_text.get_width()//2, 150))
            
            final_score_text = menu_font.render(f"Final Score: {score}", True, BLACK)
            screen.blit(final_score_text, (WIDTH//2 - final_score_text.get_width()//2, 250))
            
            restart_text = menu_font.render("Press SPACE to Restart", True, GREEN)
            screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, 350))
            
            # Show current character
            current_character.x = WIDTH//2 - current_character.width//2
            current_character.y = 400
            current_character.draw()
    else:
        # Main menu
        draw_background()
        draw_menu()
    
    pygame.display.update()

pygame.quit()
sys.exit()
